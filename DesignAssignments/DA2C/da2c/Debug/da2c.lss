
da2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069b  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  0000083f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000253  00000000  00000000  00000e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000355  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005f  00000000  00000000  00001415  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
//60% duty cycle: .435s high, .290s low
	uint8_t ovfcount = 0; //initialize overflow count - used as a multiplier to have a longer delay for timer0
	uint8_t ovflimit = 18; //initialize overflow count limit to go with the .290 low part of duty cycle 
	DDRB |= (1 << 2); //set PORTB.2 as output 
  80:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << 2); //turn LED (D4) off 
  82:	2a 9a       	sbi	0x05, 2	; 5
	TCCR0B |= (1 << CS02) | (1 << CS00); //set to 1024 prescaler
  84:	85 b5       	in	r24, 0x25	; 37
  86:	85 60       	ori	r24, 0x05	; 5
  88:	85 bd       	out	0x25, r24	; 37
    TCNT0 = 4; //initialize timer to count 4, will count 252 times to get to overflow 
  8a:	84 e0       	ldi	r24, 0x04	; 4
  8c:	86 bd       	out	0x26, r24	; 38

int main(void)
{
//60% duty cycle: .435s high, .290s low
	uint8_t ovfcount = 0; //initialize overflow count - used as a multiplier to have a longer delay for timer0
	uint8_t ovflimit = 18; //initialize overflow count limit to go with the .290 low part of duty cycle 
  8e:	92 e1       	ldi	r25, 0x12	; 18


int main(void)
{
//60% duty cycle: .435s high, .290s low
	uint8_t ovfcount = 0; //initialize overflow count - used as a multiplier to have a longer delay for timer0
  90:	80 e0       	ldi	r24, 0x00	; 0
	while (1) 
    {
		while ((TIFR0 & 0x01) == 0); //keep looping until overflow occurs 
		ovfcount++; //increment overflow multiplier 
		if (ovfcount == ovflimit) {	//LED is toggled only after overflow count meets the limit
			PORTB ^= (1 << 2); //toggle LED 
  92:	24 e0       	ldi	r18, 0x04	; 4
			if (ovflimit == 18) { //ovf count limit changes/alternates to get the 60% duty cycle 
				ovflimit = 27;	//ovflimit is changed to 27 to perform the .435 high part of duty cycle 
  94:	4b e1       	ldi	r20, 0x1B	; 27
			}
			else {
				ovflimit = 18;
  96:	32 e1       	ldi	r19, 0x12	; 18
	TCCR0B |= (1 << CS02) | (1 << CS00); //set to 1024 prescaler
    TCNT0 = 4; //initialize timer to count 4, will count 252 times to get to overflow 

	while (1) 
    {
		while ((TIFR0 & 0x01) == 0); //keep looping until overflow occurs 
  98:	a8 9b       	sbis	0x15, 0	; 21
  9a:	fe cf       	rjmp	.-4      	; 0x98 <main+0x18>
		ovfcount++; //increment overflow multiplier 
  9c:	8f 5f       	subi	r24, 0xFF	; 255
		if (ovfcount == ovflimit) {	//LED is toggled only after overflow count meets the limit
  9e:	98 13       	cpse	r25, r24
  a0:	0a c0       	rjmp	.+20     	; 0xb6 <main+0x36>
			PORTB ^= (1 << 2); //toggle LED 
  a2:	85 b1       	in	r24, 0x05	; 5
  a4:	82 27       	eor	r24, r18
  a6:	85 b9       	out	0x05, r24	; 5
			if (ovflimit == 18) { //ovf count limit changes/alternates to get the 60% duty cycle 
  a8:	92 31       	cpi	r25, 0x12	; 18
  aa:	19 f0       	breq	.+6      	; 0xb2 <main+0x32>
				ovflimit = 27;	//ovflimit is changed to 27 to perform the .435 high part of duty cycle 
			}
			else {
				ovflimit = 18;
  ac:	93 2f       	mov	r25, r19
			}
			ovfcount = 0; //reset overflow count 
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <main+0x36>
		while ((TIFR0 & 0x01) == 0); //keep looping until overflow occurs 
		ovfcount++; //increment overflow multiplier 
		if (ovfcount == ovflimit) {	//LED is toggled only after overflow count meets the limit
			PORTB ^= (1 << 2); //toggle LED 
			if (ovflimit == 18) { //ovf count limit changes/alternates to get the 60% duty cycle 
				ovflimit = 27;	//ovflimit is changed to 27 to perform the .435 high part of duty cycle 
  b2:	94 2f       	mov	r25, r20
			}
			else {
				ovflimit = 18;
			}
			ovfcount = 0; //reset overflow count 
  b4:	80 e0       	ldi	r24, 0x00	; 0
		}
		TIFR0 |= (1 << TOV0); //clear overflow flag 
  b6:	a8 9a       	sbi	0x15, 0	; 21
		TCNT0 = 4; //reset timer to count 4 
  b8:	26 bd       	out	0x26, r18	; 38
    }
  ba:	ee cf       	rjmp	.-36     	; 0x98 <main+0x18>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
