
da2c_t1_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068c  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000249  00000000  00000000  00000e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035b  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002b  00000000  00000000  00001403  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>

int main(void) 
{
	uint8_t ovfcount = 0; //initialize overflow count 
	DDRB |= (1 << 2); //set PB2 as output 
  80:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1 << 2); //turn LED off
  82:	2a 9a       	sbi	0x05, 2	; 5
	DDRC &= (0 << 2); //set PC2 as input 
  84:	87 b1       	in	r24, 0x07	; 7
  86:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1 << 2); //enable pull up 
  88:	42 9a       	sbi	0x08, 2	; 8
	TCCR0B |= (1 << CS02) | (1 << CS00); //enable 1024 prescaler 
  8a:	85 b5       	in	r24, 0x25	; 37
  8c:	85 60       	ori	r24, 0x05	; 5
  8e:	85 bd       	out	0x25, r24	; 37

	
	while(1) {
		if (!(PINC & 0x04)) {
			PORTB &= (0 << 2); //turn LED on
			TCNT0 = 2; //set timer to count 2  
  90:	92 e0       	ldi	r25, 0x02	; 2
	PORTC |= (1 << 2); //enable pull up 
	TCCR0B |= (1 << CS02) | (1 << CS00); //enable 1024 prescaler 

	
	while(1) {
		if (!(PINC & 0x04)) {
  92:	32 99       	sbic	0x06, 2	; 6
  94:	13 c0       	rjmp	.+38     	; 0xbc <main+0x3c>
			PORTB &= (0 << 2); //turn LED on
  96:	85 b1       	in	r24, 0x05	; 5
  98:	15 b8       	out	0x05, r1	; 5
			TCNT0 = 2; //set timer to count 2  
  9a:	96 bd       	out	0x26, r25	; 38
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0a c0       	rjmp	.+20     	; 0xb4 <main+0x34>
			while (ovfcount != 77) {
				if (TIFR0 & (1<<TOV0)) {
  a0:	a8 99       	sbic	0x15, 0	; 21
  a2:	03 c0       	rjmp	.+6      	; 0xaa <main+0x2a>
	
	while(1) {
		if (!(PINC & 0x04)) {
			PORTB &= (0 << 2); //turn LED on
			TCNT0 = 2; //set timer to count 2  
			while (ovfcount != 77) {
  a4:	8d 34       	cpi	r24, 0x4D	; 77
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x20>
  a8:	08 c0       	rjmp	.+16     	; 0xba <main+0x3a>
				if (TIFR0 & (1<<TOV0)) {
					TCNT0 = 2; //reset timer to count 2
  aa:	96 bd       	out	0x26, r25	; 38
					TIFR0 |= (1<<TOV0); //clear overflow flag
  ac:	a8 9a       	sbi	0x15, 0	; 21
					ovfcount++; 
  ae:	8f 5f       	subi	r24, 0xFF	; 255
	
	while(1) {
		if (!(PINC & 0x04)) {
			PORTB &= (0 << 2); //turn LED on
			TCNT0 = 2; //set timer to count 2  
			while (ovfcount != 77) {
  b0:	8d 34       	cpi	r24, 0x4D	; 77
  b2:	19 f0       	breq	.+6      	; 0xba <main+0x3a>
				if (TIFR0 & (1<<TOV0)) {
  b4:	a8 9b       	sbis	0x15, 0	; 21
  b6:	f4 cf       	rjmp	.-24     	; 0xa0 <main+0x20>
  b8:	f8 cf       	rjmp	.-16     	; 0xaa <main+0x2a>
					TIFR0 |= (1<<TOV0); //clear overflow flag
					ovfcount++; 
				}
			}
			ovfcount = 0;	//reset overflow count 
			TIFR0 |= (1 << TOV0); //clear overflow flag 
  ba:	a8 9a       	sbi	0x15, 0	; 21
		}
		PORTB |= (1 << 2);	//turn LED off
  bc:	2a 9a       	sbi	0x05, 2	; 5
	}
  be:	e9 cf       	rjmp	.-46     	; 0x92 <main+0x12>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
