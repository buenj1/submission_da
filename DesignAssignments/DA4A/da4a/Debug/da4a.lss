
da4a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000734  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000689  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c0  00000000  00000000  0000100d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ad  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b8  00000000  00000000  000016d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000178d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

uint8_t switch_toggle = 0; //this value will be toggled once interrupt occurs

int main(void)
{
	DDRD |= (1 << 5); //set PD5 as output 
  90:	55 9a       	sbi	0x0a, 5	; 10
	DDRC = 0x04;  	
  92:	84 e0       	ldi	r24, 0x04	; 4
  94:	87 b9       	out	0x07, r24	; 7
	PORTC = (1 << 2); //enable pull-up on PC2 
  96:	88 b9       	out	0x08, r24	; 8

//initialize timer0 	
	TCCR0A |= (1 << COM0B1) | (1 << WGM01) | (1 << WGM00); //clear OC0B on comp. match -- set to non-inverting mode, set to Fast PWM mode 
  98:	84 b5       	in	r24, 0x24	; 36
  9a:	83 62       	ori	r24, 0x23	; 35
  9c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00); //set timer prescaler to 1024
  9e:	85 b5       	in	r24, 0x25	; 37
  a0:	85 60       	ori	r24, 0x05	; 5
  a2:	85 bd       	out	0x25, r24	; 37

//initialize interrupt pins to enable the motor 
	PCICR |= (1 << PCIE1); //enable pin change interrupt 
  a4:	e8 e6       	ldi	r30, 0x68	; 104
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	80 83       	st	Z, r24
    PCMSK1 |= (1 << PCINT10); //enable pin PC2 (PCINT10) for a pin change interrupt 
  ae:	ec e6       	ldi	r30, 0x6C	; 108
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	80 83       	st	Z, r24
	
	sei(); //enable global interrupts 
  b8:	78 94       	sei
	
//initialize ADC 
	ADMUX |= (1 << REFS0); //Reference voltage at Aref, using PC0 for ADC -- 0 bits by default 
  ba:	ec e7       	ldi	r30, 0x7C	; 124
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); 
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	87 6e       	ori	r24, 0xE7	; 231
  cc:	80 83       	st	Z, r24
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x3e>

000000d0 <__vector_4>:
    }
}


//Interrupt Subroutine
ISR (PCINT1_vect) {
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	if (!(PINC & (1 << PINC2))) {
  e4:	32 99       	sbic	0x06, 2	; 6
  e6:	22 c0       	rjmp	.+68     	; 0x12c <__vector_4+0x5c>
		if (switch_toggle == 0) {
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ec:	81 11       	cpse	r24, r1
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <__vector_4+0x22>
			OCR0B = 0; //timer should not run, keep compare match at 0 until toggle is on again  
  f0:	18 bc       	out	0x28, r1	; 40
		}

		if (switch_toggle == 1) {
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	51 f4       	brne	.+20     	; 0x10e <__vector_4+0x3e>
			//stay in while lp if potentiometer is still being adjusted, give it some time to convert the analog value to digital 
			while ((ADCSRA & (1<<ADIF)) == 0); //if ADIF bit is 1, exit while lp -- ADC conversion is finished, potentiometer value is set 
  fa:	ea e7       	ldi	r30, 0x7A	; 122
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	84 ff       	sbrs	r24, 4
 102:	fd cf       	rjmp	.-6      	; 0xfe <__vector_4+0x2e>
			OCR0B = ADC; //store ADC value into output compare register -- will vary depending on the potentiometer value 
 104:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 108:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 10c:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	83 ed       	ldi	r24, 0xD3	; 211
 112:	90 e3       	ldi	r25, 0x30	; 48
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <__vector_4+0x44>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <__vector_4+0x4e>
 11e:	00 00       	nop
		}

		_delay_ms(1000); 
		switch_toggle ^= 1; 
 120:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	89 27       	eor	r24, r25
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 12c:	ff 91       	pop	r31
 12e:	ef 91       	pop	r30
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
