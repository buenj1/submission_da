
da4b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074a  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b6  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001284  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003aa  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001672  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_timer1>:
#include <util/delay.h>

//initialize timer1
void init_timer1() {
//set to non-inverting mode 
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); 
  80:	e0 e8       	ldi	r30, 0x80	; 128
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 6a       	ori	r24, 0xA2	; 162
  88:	80 83       	st	Z, r24
//prescaler=64, fast pwm mode 
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11) | (1 << CS10);
  8a:	e1 e8       	ldi	r30, 0x81	; 129
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	8b 61       	ori	r24, 0x1B	; 27
  92:	80 83       	st	Z, r24
	ICR1 = 4999; //fPWM = 50Hz (20ms period)
  94:	87 e8       	ldi	r24, 0x87	; 135
  96:	93 e1       	ldi	r25, 0x13	; 19
  98:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  9c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
  a0:	08 95       	ret

000000a2 <init_adc>:
}

//initialize ADC for potentiometer
void init_adc() {
	ADMUX |= (1 << REFS0); //reference voltage at AREF
  a2:	ec e7       	ldi	r30, 0x7C	; 124
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	87 68       	ori	r24, 0x87	; 135
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <main>:



int main(void)
{
	DDRB |= (1 << 1); //set PB1 as output (PWM)
  b8:	21 9a       	sbi	0x04, 1	; 4

//call functions for initialization 
	init_timer1();
  ba:	0e 94 40 00 	call	0x80	; 0x80 <init_timer1>
	init_adc();
  be:	0e 94 51 00 	call	0xa2	; 0xa2 <init_adc>

    while (1) 
    {
		ADCSRA |= (1 << ADSC); //start converting
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
		//wait for conversion to finish..
		while((ADCSRA & (1 << ADIF)) == 0);
		//when finished, store value into output comp. reg 
		OCR1A = ADC; 
  c6:	c8 e7       	ldi	r28, 0x78	; 120
  c8:	d0 e0       	ldi	r29, 0x00	; 0
  ca:	a8 e8       	ldi	r26, 0x88	; 136
  cc:	b0 e0       	ldi	r27, 0x00	; 0
	init_timer1();
	init_adc();

    while (1) 
    {
		ADCSRA |= (1 << ADSC); //start converting
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
		//wait for conversion to finish..
		while((ADCSRA & (1 << ADIF)) == 0);
  d4:	80 81       	ld	r24, Z
  d6:	84 ff       	sbrs	r24, 4
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <main+0x1c>
		//when finished, store value into output comp. reg 
		OCR1A = ADC; 
  da:	88 81       	ld	r24, Y
  dc:	99 81       	ldd	r25, Y+1	; 0x01
  de:	11 96       	adiw	r26, 0x01	; 1
  e0:	9c 93       	st	X, r25
  e2:	8e 93       	st	-X, r24
		ADCSRA |= (1 << ADIF); //clear ADC interrupt flag  
  e4:	80 81       	ld	r24, Z
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	2f ef       	ldi	r18, 0xFF	; 255
  ec:	8f e4       	ldi	r24, 0x4F	; 79
  ee:	93 ec       	ldi	r25, 0xC3	; 195
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x38>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x42>
  fa:	00 00       	nop
  fc:	e8 cf       	rjmp	.-48     	; 0xce <main+0x16>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
