
da4b_stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000744  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000631  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000337  00000000  00000000  00000fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000387  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000030  00000000  00000000  000016db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6d 00 	call	0xda	; 0xda <main>
  78:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_timer1>:
#include <avr/io.h>

//initialize timer1
void init_timer1() {
//set to CTC mode, prescaler = 1024
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10); 
  80:	e1 e8       	ldi	r30, 0x81	; 129
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	8d 60       	ori	r24, 0x0D	; 13
  88:	80 83       	st	Z, r24
  8a:	08 95       	ret

0000008c <init_adc>:
}

//initialize ADC for potentiometer
void init_adc() {
	ADMUX |= (1 << REFS0); //reference voltage at AREF
  8c:	ec e7       	ldi	r30, 0x7C	; 124
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	80 64       	ori	r24, 0x40	; 64
  94:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	87 68       	ori	r24, 0x87	; 135
  9e:	80 83       	st	Z, r24
  a0:	08 95       	ret

000000a2 <start_conversion>:
	//enable ADC, prescaler=128
}

void start_conversion() {
	ADCSRA |= (1 << ADSC); //start converting
  a2:	ea e7       	ldi	r30, 0x7A	; 122
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	80 83       	st	Z, r24
	//wait for conversion to finish..
	while((ADCSRA & (1 << ADIF)) == 0);
  ac:	80 81       	ld	r24, Z
  ae:	84 ff       	sbrs	r24, 4
  b0:	fd cf       	rjmp	.-6      	; 0xac <start_conversion+0xa>
	//when finished, store value into output comp. reg
	OCR1A = ADC;
  b2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  b6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	ADCSRA |= (1 << ADIF); //clear ADC interrupt flag
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <timer1_delay>:
}

void timer1_delay() {
	start_conversion();
  ce:	0e 94 51 00 	call	0xa2	; 0xa2 <start_conversion>
	while ((TIFR1 & 0x02) == 0);
  d2:	b1 9b       	sbis	0x16, 1	; 22
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <timer1_delay+0x4>
	TIFR1 |= (1 << OCF1A); //clear output compare flag reg.
  d6:	b1 9a       	sbi	0x16, 1	; 22
  d8:	08 95       	ret

000000da <main>:
}


int main(void)
{
	DDRD = 0x0F; //set lower 4-bits for PORTD as output (input to motor driver -- magnetic coils)
  da:	8f e0       	ldi	r24, 0x0F	; 15
  dc:	8a b9       	out	0x0a, r24	; 10

//call functions for initialization
	init_timer1();
  de:	0e 94 40 00 	call	0x80	; 0x80 <init_timer1>
	init_adc();
  e2:	0e 94 46 00 	call	0x8c	; 0x8c <init_adc>

    while (1) 
    {
		PORTD = 0x09;
  e6:	0f 2e       	mov	r0, r31
  e8:	f9 e0       	ldi	r31, 0x09	; 9
  ea:	cf 2e       	mov	r12, r31
  ec:	f0 2d       	mov	r31, r0
		timer1_delay();
		PORTD = 0x08;
  ee:	68 94       	set
  f0:	dd 24       	eor	r13, r13
  f2:	d3 f8       	bld	r13, 3
		timer1_delay();
		PORTD = 0x0C;
  f4:	0f 2e       	mov	r0, r31
  f6:	fc e0       	ldi	r31, 0x0C	; 12
  f8:	ef 2e       	mov	r14, r31
  fa:	f0 2d       	mov	r31, r0
		timer1_delay();
		PORTD = 0x04;
  fc:	68 94       	set
  fe:	ff 24       	eor	r15, r15
 100:	f2 f8       	bld	r15, 2
		timer1_delay();
		PORTD = 0x06;
 102:	06 e0       	ldi	r16, 0x06	; 6
		timer1_delay();
		PORTD = 0x02;
 104:	12 e0       	ldi	r17, 0x02	; 2
		timer1_delay();
		PORTD = 0x03;
 106:	d3 e0       	ldi	r29, 0x03	; 3
		timer1_delay();
		PORTD = 0x01;
 108:	c1 e0       	ldi	r28, 0x01	; 1
	init_timer1();
	init_adc();

    while (1) 
    {
		PORTD = 0x09;
 10a:	cb b8       	out	0x0b, r12	; 11
		timer1_delay();
 10c:	0e 94 67 00 	call	0xce	; 0xce <timer1_delay>
		PORTD = 0x08;
 110:	db b8       	out	0x0b, r13	; 11
		timer1_delay();
 112:	0e 94 67 00 	call	0xce	; 0xce <timer1_delay>
		PORTD = 0x0C;
 116:	eb b8       	out	0x0b, r14	; 11
		timer1_delay();
 118:	0e 94 67 00 	call	0xce	; 0xce <timer1_delay>
		PORTD = 0x04;
 11c:	fb b8       	out	0x0b, r15	; 11
		timer1_delay();
 11e:	0e 94 67 00 	call	0xce	; 0xce <timer1_delay>
		PORTD = 0x06;
 122:	0b b9       	out	0x0b, r16	; 11
		timer1_delay();
 124:	0e 94 67 00 	call	0xce	; 0xce <timer1_delay>
		PORTD = 0x02;
 128:	1b b9       	out	0x0b, r17	; 11
		timer1_delay();
 12a:	0e 94 67 00 	call	0xce	; 0xce <timer1_delay>
		PORTD = 0x03;
 12e:	db b9       	out	0x0b, r29	; 11
		timer1_delay();
 130:	0e 94 67 00 	call	0xce	; 0xce <timer1_delay>
		PORTD = 0x01;
 134:	cb b9       	out	0x0b, r28	; 11
		timer1_delay();
 136:	0e 94 67 00 	call	0xce	; 0xce <timer1_delay>
 13a:	e7 cf       	rjmp	.-50     	; 0x10a <main+0x30>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
